// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VenueHosting.Module.Place.Infrastructure.Persistence;

#nullable disable

namespace VenueHosting.Module.Place.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PlaceApplicationDbContext))]
    partial class PlaceApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Place")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VenueHosting.Domain.Place.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OwnerId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Places", "Place");
                });

            modelBuilder.Entity("VenueHosting.Module.Place.Domain.Owner.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Owners", "Place");
                });

            modelBuilder.Entity("VenueHosting.Domain.Place.Place", b =>
                {
                    b.OwnsMany("VenueHosting.Module.Place.Domain.Place.Entities.Facility", "Facilities", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Description");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<Guid>("PlaceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("Id");

                            b1.HasIndex("PlaceId");

                            b1.ToTable("Facility", "Place");

                            b1.WithOwner()
                                .HasForeignKey("PlaceId");
                        });

                    b.OwnsOne("VenueHosting.Module.Place.Domain.Place.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PlaceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PlaceId");

                            b1.ToTable("Places", "Place");

                            b1.WithOwner()
                                .HasForeignKey("PlaceId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("VenueHosting.Module.Place.Domain.Owner.Owner", b =>
                {
                    b.OwnsMany("VenueHosting.Module.Place.Domain.Place.ValueObjects.PlaceId", "PlaceIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("OwnerPlaceIds", "Place", t =>
                                {
                                    t.Property("Id")
                                        .HasColumnName("Id1");
                                });

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("PlaceIds");
                });
#pragma warning restore 612, 618
        }
    }
}
